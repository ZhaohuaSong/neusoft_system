#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import json
from django.db.models import Q
from ..iso_msg_type import *
from ..system_enum import *
from ....common.iso.iso_response_code import *

from django.apps import apps
ProtocolType = apps.get_model(app_label='packmanage', model_name='ProtocolType')
Protocoltrigger = apps.get_model(app_label='packmanage', model_name='Protocoltrigger')

#QiuJL 2017.3.1
#数据源配置解析
class DataSrcConfig:
    def init(self, id, bRequest=False):
        '''
        获取报文协议参数
        :param id:prototol_id or trigger_id
        :param bRequest 是否是请求 true那么内容从Protocoltrigger表中拿取，否则从ProtocolType拿取解析
        :return:
        '''
        if bRequest:
            info = Protocoltrigger.objects.get(id=id)
            self.__get_data_src_fro_request(info.trigger_param)
        else:
            info = ProtocolType.objects.get(protocol_id=id)
            self.__get_data_src_for_response(info.response_datasrc_content)

    def get_src_type(self):
        '''
        获取数据源类型
        :return:
        '''
        return self.src_type

    def get_src_name(self):
        '''
        获取数据源名称或者ID
        :return:
        '''
        return self.src_name

    def get_data_src_in_col_index(self):
        '''
        获取数据源输入列索引或者字段列表
        :return:
        '''
        return self.in_col_index

    def get_data_src_out_index(self):
        '''
        获取数据源输出列表或者字段列表
        :return:
        '''
        return self.out_col_index

    def get_data_src_in_col_index_note(self):
        '''
        获取输入列备注
        :return:
        '''
        return  self.in_col_index_note

    def get_data_src_out_col_index_note(self):
        '''
        获取输出列备注
        :return:
        '''
        return self.out_col_index_note

    def get_data_src_query_param(self):
        '''
        获取请求数据源的查询条件 [[value, key, note], [value, key, note]]
        :return:
        '''
        return self.query_param

    def get_data_src_format_query_param(self):
        '''
        获取格式化后的查询条件
        :return: 字典{}格式返回
        '''
        dict_data = {}
        for data in self.query_param:
            v = data[0]
            k = data[1]
            dict_data[k] = v

        return dict_data

    def __get_data_src_for_response(self, data_src):
        '''
        获取数据源参数
        :param data_src:
        :return:
        '''

        if len(data_src)==0:
            return
        dict_src = json.loads(data_src)
        self.src_name = dict_src['src_name']
        self.src_type = dict_src['src_type']

        in_param = dict_src['param_in']
        out_param = dict_src['param_out']

        self.in_col_index = []
        for i in range(0, len(in_param)):
            if self.src_type == DATA_SRC_TYPE_FILE:
                self.in_col_index.append( in_param[str(i)][0] )
            elif self.src_type == DATA_SRC_TYPE_DB:
                v = in_param[str(i)]
                n = v.rfind('_')
                self.in_col_index.append(v[0:n])

        self.out_col_index = []
        for i in range(0, len(out_param)):
            if self.src_type == DATA_SRC_TYPE_FILE:
                self.out_col_index.append(out_param[str(i)][0])
            elif self.src_type == DATA_SRC_TYPE_DB:
                v = out_param[str(i)]
                n = v.rfind('_')
                self.out_col_index.append(v[0:n])

    def __get_data_src_fro_request(self, dict_src):
        '''

        :param data_src:
        :return:
        '''

        if len(dict_src) ==0:
            return

        dict_src = json.loads(dict_src)
        self.src_name = dict_src['src_name']
        self.src_type = dict_src['src_type']
        in_param = dict_src['param_in']
        out_param = dict_src['param_out']
        self.query_param = dict_src['query_param']

        self.in_col_index = []
        self.in_col_index_note = []
        for i in range(0, len(in_param)):
            if self.src_type == DATA_SRC_TYPE_FILE:
                self.in_col_index.append(in_param[str(i)][0])
                self.in_col_index_note.append(in_param[str(i)])
            elif self.src_type == DATA_SRC_TYPE_DB:
                v = in_param[str(i)]
                n = v.rfind('_')
                self.in_col_index.append(v[0:n])
                self.in_col_index_note.append(v)


        self.out_col_index = []
        self.out_col_index_note = []

        for i in range(0, len(out_param)):
            if self.src_type == DATA_SRC_TYPE_FILE:
                self.out_col_index.append(out_param[str(i)][0])
                self.out_col_index_note.append(out_param[str(i)])
            elif self.src_type == DATA_SRC_TYPE_DB:
                v = out_param[str(i)]
                n = v.rfind('_')
                self.out_col_index.append(v[0:n])
                self.out_col_index_note.append(v)

        try:
            data_response = dict_src['data_response']
            self.src_name_response = data_response['src_name']
            self.src_type_response = data_response['src_type']
            src_data_list = data_response['src_data']

            self.response_data_list = []
            for data in src_data_list:
                self.response_data_list.append( [data[0], data[1], data[2]]  )

        except Exception as e:
            print '--------------------------',e
            pass

    def get_response_src_name(self):
        return  self.src_name_response

    def get_response_src_type(self):
        return self.src_type_response

    def get_response_data_list(self):
        return self.response_data_list
