#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2016/12/27 下午6:06
# @Author  : qiujunli
# @Site    :
# @File    : views_apps.py
# @Software: PyCharm
# @Function: 应用程序视图模型

from django.shortcuts import render
from django.http import HttpResponseRedirect,HttpResponse
from django.core.urlresolvers import reverse
from ..common.datatables.views import BaseDatatableView
from django.views.generic import TemplateView
from ..vanilla import CreateView, UpdateView
from django.http import JsonResponse
from django.db.models import Q
import datetime
import json
from ..sysadmin.models import SysDict
import logging
from models import ReceiveMsg
_logger = logging.getLogger('loggers')
from PackData import PackData
from ..packmanage.api.interface import DataInterface
from ..packmanage.pack.pack_ctrl import PackCtrl
# Create your views here.

class ReceiveMsgListView(TemplateView):
    template_name = 'richdataserver/richdataserver.receivemsg.list.html'



class ReceiveMsgDataView(BaseDatatableView):
    model = ReceiveMsg
    columns = ['id', 'id', 'msg_no','status', 'code', 'result', 'resp_time','local_ip', 'id', 'id', ]
    order_columns = ['id', 'id', 'msg_no', 'status', 'code', 'result', 'resp_time', 'id', 'id', ]

    def get_json(self, response):
        data_list = response['data']
        for data in data_list:
            status = data[3]
            code = data[4]
            result = data[5]
            data[3] = SysDict.objects.filter(dict_type='msgstatus').filter(dict_id=status).values_list(
                                              "dict_name", flat=True)[0]
            if data[4]:
                data[4] = SysDict.objects.filter(dict_type='msgcode').filter(dict_id=code).values_list(
                                              "dict_name", flat=True)[0]
            if data[5]:
                data[5] = SysDict.objects.filter(dict_type='msgdesc').filter(dict_id=result).values_list(
                                              "dict_name", flat=True)[0]
            data[6]=data[6].strftime("%Y-%m-%d %H:%M:%S")
        return super(ReceiveMsgDataView, self).get_json(response)


def doAnswer(request):
        receivemsg =  ReceiveMsg.objects.get(id=request.GET.get('id',''))
        packdata =  PackData()
        json_data = {}
        json_data['msg_no']=receivemsg.msg_no
        intefface =  DataInterface()#调用报文解析工具
        receivemsg.back_content = intefface.receive(receivemsg.content)
        json_data['back_content'] = receivemsg.back_content
        json_data['status']='3'
        packdata.address=(receivemsg.from_ip,int(receivemsg.from_ip_port))
        packdata.message = str(json_data)
        data,address =  packdata.send_message()
        obj = eval(data)
        receivemsg.result = obj['msg']
        receivemsg.status=obj['status']
        # sendmsg.server_address = address
        receivemsg.save()
        return HttpResponse(json.dumps(obj,ensure_ascii=False), content_type="application/json")


def recedetail(request):
    sendmsg =  ReceiveMsg.objects.get(id=request.GET.get('id',''))
    content = sendmsg.content
    packctrl =  PackCtrl()
    context={}
    try:
        a = packctrl.get_pack_content(assic_iso=content)

    except:
        a=[]
    try:
        b =packctrl.get_pack_content(assic_iso=sendmsg.back_content)
    except:
        b=[]
    context['list']=a+b

    # print '--------'
    # a = [{"key":"65","desc":"姓名","value":"李四"},{"key":"64","desc":"性别","value":"男"}]

    return render(request,'richdataserver/recemsg_detail.html',context)





def recemsg_batches_delete(request):
    '''
    批量删除
    :param request:
    :return:
    '''
    json_data = json.loads(request.GET.get('ids'))
    list_id_del = json_data['ids']
    sql = Q()
    for id in list_id_del:
        sql = sql | Q(id=id)
    ReceiveMsg.objects.filter(sql).delete()
    name_dict = {'code': '00', 'desc': '删除成功!'}
    return JsonResponse(name_dict)
