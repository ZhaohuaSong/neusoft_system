#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Update a redis server cache when an evenement is trigger
# in MySQL replication log
#
import os,sys
sys.path.append(os.path.dirname(os.path.abspath("__file__")))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.local')
import django
django.setup()

from django.apps import apps
procData = apps.get_model(app_label='richdataserver', model_name='ProcData')
from pymysqlreplication import BinLogStreamReader
from pymysqlreplication.row_event import (
    DeleteRowsEvent,
    UpdateRowsEvent,
    WriteRowsEvent,
)

def main(pid,setting,tables):
        proc = procData()
        proc.trigger_id = int(sys.argv[1])
        proc.proc_id = str(pid)
        proc.save()
        stream = BinLogStreamReader(connection_settings=setting,
                                    server_id=1,
                                    only_events=[DeleteRowsEvent, WriteRowsEvent, UpdateRowsEvent],
                                    # log_file='/home/mysqldata/data/binlog.000003',
                                    # log_pos=9747,
                                    blocking=True
                                    )


        for binlogevent in stream:
            prefix = "%s:%s:" % (binlogevent.schema, binlogevent.table)
            print prefix
            if binlogevent.table in tables:
                for row in binlogevent.rows:
                    if isinstance(binlogevent, DeleteRowsEvent):
                        vals = row["values"]
                        print '--------------delete---------------'
                        print vals
                    elif isinstance(binlogevent, UpdateRowsEvent):
                        vals = row["after_values"]
                        print '--------------update---------------'
                        print vals
                    elif isinstance(binlogevent, WriteRowsEvent):
                        vals = row["values"]
                        print '--------------add---------------'
                        print vals

        stream.close()


