#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2016/12/27 下午6:06
# @Author  : qiujunli
# @Site    :
# @File    : views_apps.py
# @Software: PyCharm
# @Function: 应用程序视图模型

from django.shortcuts import render
from django.http import HttpResponse
from ..common.datatables.views import BaseDatatableView
from django.views.generic import TemplateView
from django.http import JsonResponse
import json
from ..sysadmin.models import SysDict
import logging
from models import ProcData
from redismodels import ReceiveMsgRs,PidRs
_logger = logging.getLogger('loggers')
from ..packmanage.pack.pack_ctrl import PackCtrl
import os
import sys
import subprocess
import signal
import platform
# Create your views here.

p = None
class ReceiveMsgListView(TemplateView):
    template_name = 'richdataserver/richdataserver.receivemsg.list.html'



def receiveMsgRsList(request):

    context ={}
    context['data']=[]
    context['draw']=request.POST.get('draw',1)
    length = request.POST.get('length',10)
    allData =  ReceiveMsgRs.objects.all()
    rsset = allData.limit(int(length),(int(request.POST.get('start',0))))
    for rs in rsset:
        data = []
        data.append(int(rs.id))
        data.append(int(rs.id))
        data.append(rs.app_id)
        data.append(rs.protocol_id)

        if rs.status=='1':
            status_name = '接收成功'
        elif rs.status=='2':
            status_name = '接收失败'

        # pc = PackCtrl()
        # pc.get_pack_content()
        # pc.get_operation()
        # status_name = packctrl

        data.append(status_name)
        if rs.type =='0100':
            type_name = '报文协议配置请求'
        elif rs.type =='0101':
            type_name = '报文协议配置响应'
        elif rs.type == '0200':
            type_name = '数据交换'
        data.append(type_name)
        data.append(rs.receive_time)
        data.append(int(rs.id))
        context['data'].append(data)
    context['recordsTotal']=int(len(allData))
    context['recordsFiltered']=int(len(allData))
    context['result']='ok'

    return JsonResponse(context)








def recedetail(request):
    '''
    接收报文详情
    :param request:
    :return:
    '''
    receivemsg =  ReceiveMsgRs.objects.get_by_id(id=request.GET.get('id',''))
    packctrl =  PackCtrl()
    context={}
    try:
        a,b = packctrl.get_pack_content(assic_iso=receivemsg.back_content)
    except Exception as e:
        print '解析报文出错......', e
        a,b=[], []

    context['list'] = a
    context['list2'] = b
    context['operation_type'] = packctrl.get_operation()
    return render(request,'richdataserver/recemsg_detail.html',context)





def recemsg_batches_delete(request):
    '''
    批量删除
    :param request:
    :return:
    '''
    json_data = json.loads(request.GET.get('ids'))
    list_id_del = json_data['ids']
    for ji in list_id_del:
        ReceiveMsgRs.objects.get_by_id(id=ji).delete()
    name_dict = {'code': '00', 'desc': '删除成功!'}
    return JsonResponse(name_dict)


def server_start(request):
   context={}
   cmd  =request.GET.get('kill','')
   global  p
   try:
       if cmd:
           try:
               proc =  PidRs.objects.all()[0]
               try:
                   os.kill(int(proc.p_id),signal.SIGILL)
               except:
                   pass
               proc.delete()
               p.kill()
           except:
               pass
           context['code']='00'
           context['status']='2'
           context['msg']='服务已经关闭'
           return JsonResponse(context)
       else:
           try:
               proc =  PidRs.objects.all()[0]
               if proc:
                   context['code']='00'
                   context['status']='3'
                   context['msg']='服务已经启动,如果测试未响应，请关闭再启动。'
                   return JsonResponse(context)
           except:
               pass

           sysstr = platform.system()
           mark = ''
           if(sysstr =="Windows"):
                mark='\\\\'
           elif(sysstr == "Linux"):
                mark='/'
           p = subprocess.Popen([sys.executable,os.path.dirname(os.path.abspath("__file__"))+mark+ 'sockestart.py'],
                                        stdout=subprocess.PIPE,
                                        stderr=subprocess.STDOUT,
                                        )
           context['code']='00'
           context['status']='1'
           context['msg']='服务启动成功'
           return JsonResponse(context)
   except Exception,e:
        print e


def trigger_start(request):
   context={}
   cmd  =request.GET.get('kill','')
   try:
       if cmd:
           try:
               proc_data = ProcData.objects.get(trigger_id=request.GET.get('trigger_id',0))
               try:
                   os.kill(int(proc_data.proc_id),signal.SIGILL)
                   context['code']='00'
                   context['status']='2'
                   context['msg']='服务已经关闭'
                   proc_data.delete()
               except:
                   context['code']='-1'
                   context['status']='3'
                   context['msg']='关闭异常'
                   pass
           except:
               context['code']='-1'
               context['status']='4'
               context['msg']='进程未记录，无法关闭'
               pass
           return JsonResponse(context)
       else:
           try:
               proc_data = ProcData.objects.get(trigger_id=request.GET.get('trigger_id',0))
               if proc_data:
                   context['code']='00'
                   context['status']='5'
                   context['msg']='服务已经启动,如果测试未响应，请关闭再启动。'
                   return JsonResponse(context)
           except:
               pass
           sysstr = platform.system()
           mark = ''
           if(sysstr =="Windows"):
                mark='\\\\'
           elif(sysstr == "Linux"):
                mark='/'

           # subprocess.Popen([sys.executable,os.path.dirname(os.path.abspath("__file__"))+mark+ 'tristart.py',str(request.GET.get('trigger_id',0))],
           #                              stdout=subprocess.PIPE,
           #                              stderr=subprocess.STDOUT,
           #                              )
           #检查脚本执行情况请用 python -m richDataX-system.dbadmin.dbmonitor_oracle 参数 进行检查
           p = subprocess.Popen([sys.executable,os.path.dirname(os.path.abspath("__file__"))+mark+ 'trigger_proc.py',str(request.GET.get('trigger_id',0))],
                                        stdout=subprocess.PIPE,
                                        stderr=subprocess.STDOUT,
                                        )
           # for line in p.stdout:
           #     print line
           context['code']='00'
           context['status']='1'
           context['msg']='服务启动成功'
           return JsonResponse(context)
   except Exception,e:
        print e


