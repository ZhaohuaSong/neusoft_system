#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2016/12/27 下午6:06
# @Author  : qiujunli
# @Site    :
# @File    : views_apps.py
# @Software: PyCharm
# @Function: 应用程序视图模型
from django.db.models import Q
from django.shortcuts import render
from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from ..common.datatables.views import BaseDatatableView
from django.views.generic import TemplateView
import json
import logging
from models import SendMsg
from redismodels import SendMsgRs
from forms import SendMsgForm,EditSendMsgForm
from ..vanilla import CreateView,UpdateView
from ..packmanage.pack.pack_ctrl import PackCtrl
import datetime
_logger = logging.getLogger('loggers')
from django.http import JsonResponse
from redis_msg import MsgClient
# Create your views here.
from ..common.randomString import IdString




class SendMsgListView(TemplateView):
    template_name = 'richdataserver/richdataserver.sendmsg.list.html'


def sendMsgRsList(request):

    context ={}
    context['data']=[]
    context['draw']=request.POST.get('draw',1)
    length = request.POST.get('length',10)
    allData =  SendMsgRs.objects.all()
    rsset = allData.limit(int(length),(int(request.POST.get('start',0))))
    for rs in rsset:
        data = []
        data.append(int(rs.id))
        data.append(int(rs.id))
        data.append(rs.app_id)
        data.append(rs.protocol_id)
        if rs.status=='0':
            status_name = '发送成功'
        elif rs.status=='1':
            status_name = '发送成功'
        elif rs.status=='2':
            status_name = '发送失败'
        data.append(status_name)

        if rs.type =='0100':
            type_name = '报文协议配置请求'
        elif rs.type =='0101':
            type_name = '报文协议配置响应'
        else:
            type_name = '数据交换'
            status_name = '发送成功'

        data.append(type_name)
        data.append(rs.send_time)
        data.append(rs.return_time)
        data.append(rs.server_address)
        data.append(rs.server_port)
        data.append(int(rs.id))
        context['data'].append(data)
    context['recordsTotal']=int(len(allData))
    context['recordsFiltered']=int(len(allData))
    context['result']='ok'
    return JsonResponse(context)




class SendMsgDataView(BaseDatatableView):
    model = SendMsg
    columns = ['id', 'id', 'msg_no','id']
    order_columns = ['id', 'id', 'msg_no',  'status', 'code', 'result', 'create_time','return_time']


# class CreateSendMsg(CreateView):
#     form_class = SendMsgForm
#     template_name = 'richdataserver/sendmsg_form.html'
#
#     def form_valid(self, form):
#         self.save(form)
#         return HttpResponseRedirect(reverse('richdataserver:sendmsg.list'))
#
#     def save(self,form):
#         sendmsg = SendMsgRs()
#         sendmsg.msg_no = IdString(mark='MS').genernateno()
#         sendmsg.content = form.cleaned_data['content']
#         sendmsg.server_address = form.cleaned_data['server_address']
#         sendmsg.server_port = form.cleaned_data['server_port']
#         sendmsg.create_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#         sendmsg.status='0'
#         sendmsg.code='-1'
#         # sendmsg.create_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#         sendmsg.save()

# class EditSendMsgView(UpdateView):
#     '''
#     编辑发送报文
#     '''
#     model = SendMsg
#     form_class = EditSendMsgForm
#     success_url = '/richdataserver/send/list'



def senddetail(request):
    sendmsg =  SendMsgRs.objects.get_by_id(id=request.GET.get('id',''))
    content = sendmsg.content
    packctrl =  PackCtrl()
    context={}
    try:
        a,b = packctrl.get_pack_content(assic_iso=content)
    except:
        print '解析报文出错....'
        a,b=[]
    context['list']=a
    context['list2']=b
    context['operation_type'] = packctrl.get_operation()
    return render(request,'richdataserver/msg_detail.html',context)

def sendrespdetail(request):
    sendmsg =  SendMsgRs.objects.get_by_id(id=request.GET.get('id',''))
    content = sendmsg.back_content
    packctrl =  PackCtrl()
    context={}
    try:
        a,b = packctrl.get_pack_content(assic_iso=content)
    except:
        print '解析报文出错....'
        a,b=[]
    context['list']=a
    context['list2']=b
    return render(request,'richdataserver/msg_resp_detail.html',context)



def sendmsg_batches_delete(request):
    '''
    批量删除
    :param request:
    :return:
    '''
    json_data = json.loads(request.GET.get('ids'))
    list_id_del = json_data['ids']
    for ji in list_id_del:
        SendMsgRs.objects.get_by_id(id=ji).delete()

    name_dict = {'code': '00', 'desc': '删除成功!'}

    return JsonResponse(name_dict)


class MsgLogList(TemplateView):
    '''
    所有的报文日志管理
    '''
    template_name = 'richdataserver/msglog.list.html'

    def get(self, request, *args, **kwargs):

        pageNumber = request.GET.get('profile4',0)

        context = {'pageNumber':pageNumber}
        return self.render_to_response(context)
